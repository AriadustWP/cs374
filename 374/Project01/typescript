Script started on 2019-09-19 21:00:25-0400
]0;wp22@gold05: ~/374/Project01[01;32mwp22@gold05[00m:[01;34m~/374/Project01[00m$ ls
[0m[01;32mcircuitSatisfiability[0m    hosts               parallelLoopSlices.c  typescript
circuitSatisfiability.c  Makefile            run
[01;32mgenHosts.pl[0m              [01;32mparallelLoopSlices[0m  slurm-99880.out
]0;wp22@gold05: ~/374/Project01[01;32mwp22@gold05[00m:[01;34m~/374/Project01[00m$ cat circuitSatisfiability.c
/* circuitSatifiability.c solves the Circuit Satisfiability
 *  Problem using a brute-force sequential solution.
 *
 *   The particular circuit being tested is "wired" into the
 *   logic of function 'checkCircuit'. All combinations of
 *   inputs that satisfy the circuit are printed.
 *
 *   16-bit version by Michael J. Quinn, Sept 2002.
 *   Extended to 32 bits by Joel C. Adams, Sept 2013.
 *   Modified by Won-Seok Park, Sept 2019
 */

#include <stdio.h>     // printf()
#include <limits.h>    // UINT_MAX
#include <mpi.h>

int checkCircuit (int, long);

int main (int argc, char *argv[]) {
   long i;               // loop variable (64 bits) 
   int id = 0;           // process id 
   int count = 0;        // number of solutions 
   int numProcesses = -1;

// Initiates parallelization
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &id);
	MPI_Comm_size(MPI_COMM_WORLD, &numProcesses);

   double startTime = 0.0, totalTime = 0.0;
   startTime = MPI_Wtime();

// Divides workload to the different processing unit
   for (i = id; i <= UINT_MAX; i += numProcesses) {
      count += checkCircuit (id, i);
   }

   totalTime = MPI_Wtime() - startTime;

   printf ("Process %d finished in time %f secs.\n", id, totalTime);
   fflush (stdout);

   printf("\nA total of %d solutions were found.\n\n", count);

// Shutdown parallelization
   MPI_Finalize();

   return 0;
}

/* EXTRACT_BIT is a macro that extracts the ith bit of number n.
 *
 * parameters: n, a number;
 *             i, the position of the bit we want to know.
 *
 * return: 1 if 'i'th bit of 'n' is 1; 0 otherwise 
 */

#define EXTRACT_BIT(n,i) ( (n & (1<<i) ) ? 1 : 0)


/* checkCircuit() checks the circuit for a given input.
 * parameters: id, the id of the process checking;
 *             bits, the (long) rep. of the input being checked.
 *
 * output: the binary rep. of bits if the circuit outputs 1
 * return: 1 if the circuit outputs 1; 0 otherwise.
 */

#define SIZE 32

int checkCircuit (int id, long bits) {
   int v[SIZE];        /* Each element is one of the 32 bits */
   int i;

   for (i = 0; i < SIZE; i++) {
     v[i] = EXTRACT_BIT(bits,i);
   }

   if ( ( (v[0] || v[1]) && (!v[1] || !v[3]) && (v[2] || v[3])
       && (!v[3] || !v[4]) && (v[4] || !v[5])
       && (v[5] || !v[6]) && (v[5] || v[6])
       && (v[6] || !v[15]) && (v[7] || !v[8])
       && (!v[7] || !v[13]) && (v[8] || v[9])
       && (v[8] || !v[9]) && (!v[9] || !v[10])
       && (v[9] || v[11]) && (v[10] || v[11])
       && (v[12] || v[13]) && (v[13] || !v[14])
       && (v[14] || v[15]) )
       &&
          ( (v[16] || v[17]) && (!v[17] || !v[19]) && (v[18] || v[19])
       && (!v[19] || !v[20]) && (v[20] || !v[21])
       && (v[21] || !v[22]) && (v[21] || v[22])
       && (v[22] || !v[31]) && (v[23] || !v[24])
       && (!v[23] || !v[29]) && (v[24] || v[25])
       && (v[24] || !v[25]) && (!v[25] || !v[26])
       && (v[25] || v[27]) && (v[26] || v[27])
       && (v[28] || v[29]) && (v[29] || !v[30])
       && (v[30] || v[31]) ) )
   {
      printf ("%d) %d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d \n", id,
         v[31],v[30],v[29],v[28],v[27],v[26],v[25],v[24],v[23],v[22],
         v[21],v[20],v[19],v[18],v[17],v[16],v[15],v[14],v[13],v[12],
         v[11],v[10],v[9],v[8],v[7],v[6],v[5],v[4],v[3],v[2],v[1],v[0]);
      fflush (stdout);
      return 1;
   } else {
      return 0;
   }
}

]0;wp22@gold05: ~/374/Project01[01;32mwp22@gold05[00m:[01;34m~/374/Project01[00m$ mpirun -np 16 -mahi  chinefile hosts ./circuitSatisfiabiility
6) 10011001111101011001100111110110 
6) 10011001111101011001101111110110 
6) 10011001111101011001110111110110 
6) 10011001111101101001100111110110 
6) 10011001111101101001101111110110 
6) 10011001111101101001110111110110 
6) 10011001111101111001100111110110 
6) 10011001111101111001101111110110 
6) 10011001111101111001110111110110 
6) 10011011111101011001100111110110 
6) 10011011111101011001101111110110 
6) 10011011111101011001110111110110 
6) 10011011111101101001100111110110 
6) 10011011111101101001101111110110 
6) 10011011111101101001110111110110 
6) 10011011111101111001100111110110 
6) 10011011111101111001101111110110 
6) 10011011111101111001110111110110 
6) 10011101111101011001100111110110 
6) 10011101111101011001101111110110 
6) 10011101111101011001110111110110 
6) 10011101111101101001100111110110 
6) 10011101111101101001101111110110 
6) 10011101111101101001110111110110 
6) 10011101111101111001100111110110 
6) 10011101111101111001101111110110 
6) 10011101111101111001110111110110 
5) 10011001111101011001100111110101 
5) 10011001111101011001101111110101 
5) 10011001111101011001110111110101 
5) 10011001111101101001100111110101 
5) 10011001111101101001101111110101 
5) 10011001111101101001110111110101 
5) 10011001111101111001100111110101 
5) 10011001111101111001101111110101 
5) 10011001111101111001110111110101 
7) 10011001111101011001100111110111 
7) 10011001111101011001101111110111 
7) 10011001111101011001110111110111 
7) 10011001111101101001100111110111 
7) 10011001111101101001101111110111 
7) 10011001111101101001110111110111 
7) 10011001111101111001100111110111 
7) 10011001111101111001101111110111 
7) 10011001111101111001110111110111 
5) 10011011111101011001100111110101 
5) 10011011111101011001101111110101 
5) 10011011111101011001110111110101 
5) 10011011111101101001100111110101 
5) 10011011111101101001101111110101 
5) 10011011111101101001110111110101 
5) 10011011111101111001100111110101 
5) 10011011111101111001101111110101 
5) 10011011111101111001110111110101 
7) 10011011111101011001100111110111 
7) 10011011111101011001101111110111 
7) 10011011111101011001110111110111 
7) 10011011111101101001100111110111 
7) 10011011111101101001101111110111 
7) 10011011111101101001110111110111 
7) 10011011111101111001100111110111 
7) 10011011111101111001101111110111 
7) 10011011111101111001110111110111 
5) 10011101111101011001100111110101 
5) 10011101111101011001101111110101 
5) 10011101111101011001110111110101 
5) 10011101111101101001100111110101 
5) 10011101111101101001101111110101 
5) 10011101111101101001110111110101 
5) 10011101111101111001100111110101 
5) 10011101111101111001101111110101 
5) 10011101111101111001110111110101 
7) 10011101111101011001100111110111 
7) 10011101111101011001101111110111 
7) 10011101111101011001110111110111 
7) 10011101111101101001100111110111 
7) 10011101111101101001101111110111 
7) 10011101111101101001110111110111 
7) 10011101111101111001100111110111 
7) 10011101111101111001101111110111 
7) 10011101111101111001110111110111 
Process 8 finished in time 16.363597 secs.

A total of 0 solutions were found.

Process 2 finished in time 17.050722 secs.

A total of 0 solutions were found.

Process 14 finished in time 17.310537 secs.

A total of 0 solutions were found.

Process 6 finished in time 17.821919 secs.

A total of 27 solutions were found.

Process 9 finished in time 18.641271 secs.

A total of 0 solutions were found.

Process 0 finished in time 20.072888 secs.

A total of 0 solutions were found.

Process 11 finished in time 20.388088 secs.

A total of 0 solutions were found.

Process 15 finished in time 20.829658 secs.

A total of 0 solutions were found.

Process 3 finished in time 21.098023 secs.

A total of 0 solutions were found.

Process 13 finished in time 21.358791 secs.

A total of 0 solutions were found.

Process 5 finished in time 21.421184 secs.

A total of 27 solutions were found.

Process 7 finished in time 21.619684 secs.

A total of 27 solutions were found.

Process 4 finished in time 22.283955 secs.

A total of 0 solutions were found.

Process 10 finished in time 22.317131 secs.

A total of 0 solutions were found.

Process 1 finished in time 22.633862 secs.

A total of 0 solutions were found.

Process 12 finished in time 22.691627 secs.

A total of 0 solutions were found.

]0;wp22@gold05: ~/374/Project01[01;32mwp22@gold05[00m:[01;34m~/374/Project01[00m$ [Kexit

Script done on 2019-09-19 21:01:35-0400
