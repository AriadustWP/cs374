Script started on 2021-11-28 19:57:01-05:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="80" LINES="24"]
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07[00m$ cat MPI/arraySum.c
/* arraySum.c uses an array to sum the values in an input file,
 *  whose name is specified on the command-line.
 * 
 * [[Summation process is parallelized using MPI method]]
 *
 * Joel Adams, Fall 2005
 * for CS 374 (HPC) at Calvin College.
 *
 * Modified by: Won Seok Park
 * Date: November 07, 2021
 * CS 374 Calvin University
 */

#include <mpi.h>
#include <stdio.h>      /* I/O stuff */
#include <stdlib.h>     /* calloc, etc. */

void readArray(char * fileName, double ** a, int * n);
double sumArray(double * a, int numValues) ;

int main(int argc, char * argv[])
{
  int  howMany, id = -1, numProcesses = -1;
  int* displs;
  double totalSum;
  double * a;

  if (argc != 2) {
    fprintf(stderr, "\n*** Usage: arraySum <inputFile>\n\n");
    exit(1);
  }

  readArray(argv[1], &a, &howMany);

  // MPI initialization
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &id);
	MPI_Comm_size(MPI_COMM_WORLD, &numProcesses);

  double 
    startTime     = 0, 
    ioTime        = 0, 
    scatterTime   = 0, 
    reductionTime = 0, 
    totalTime     = 0,
    localSum      = 0;
  
  double* aRcv; 
  int* counts;

  int numSent = howMany / numProcesses;
  int numRemain = howMany % numProcesses;

  counts = (int*) malloc(numProcesses * sizeof(int));
  displs = (int*) malloc(numProcesses * sizeof(int));
  aRcv = (double*) malloc(numSent * sizeof(double));

  startTime = MPI_Wtime();

  // Master responsible for i/o
	if (id == 0 )
	{
		readArray(argv[1], &a, &howMany);
		printf("Read in: %d\n", howMany);
		ioTime = MPI_Wtime() - startTime;
	}

  // If array doesn't slice nicely, use scatterv
  if (numRemain) {
    for (int i = 0; i < numProcesses; i++) {
      displs[i] = 0;
      if (i < numRemain) {
        counts[i] = numSent + 1;
      } else {
        counts[i] = numSent;
      }
    }
    MPI_Scatterv(a, counts, displs, MPI_DOUBLE, aRcv, counts[id], MPI_DOUBLE, 0, MPI_COMM_WORLD);
  } else {
    MPI_Scatter(a, numSent, MPI_DOUBLE, aRcv, numSent, MPI_DOUBLE, 0, MPI_COMM_WORLD);
  }
  scatterTime = MPI_Wtime() - startTime - ioTime;

  localSum = sumArray(aRcv, numSent);
	MPI_Reduce(&localSum, &totalSum, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);
	reductionTime = MPI_Wtime() - startTime - (scatterTime + ioTime);

  if (id == 0 )
	{
		totalTime = MPI_Wtime() - startTime;
		
		printf("The sum of the values in the input file '%s' is %g\n",
		   argv[1], totalSum);
		printf("Processing Time\nTotal: %f\nI/O: %f\nScatter: %f\nSum: %f\n",
			   totalTime, ioTime, scatterTime, reductionTime);
	}

  free(a);
  free(counts);
  free(displs);
  free(aRcv);

  MPI_Finalize();

  return 0;
}

/* readArray fills an array with values from a file.
 * Receive: fileName, a char*,
 *          a, the address of a pointer to an array,
 *          n, the address of an int.
 * PRE: fileName contains N, followed by N double values.
 * POST: a points to a dynamically allocated array
 *        containing the N values from fileName
 *        and n == N.
 */

void readArray(char * fileName, double ** a, int * n) {
  int count, howMany;
  double * tempA;
  FILE * fin;

  fin = fopen(fileName, "r");
  if (fin == NULL) {
    fprintf(stderr, "\n*** Unable to open input file '%s'\n\n",
                     fileName);
    exit(1);
  }

  fscanf(fin, "%d", &howMany);
  tempA = calloc(howMany, sizeof(double));
  if (tempA == NULL) {
    fprintf(stderr, "\n*** Unable to allocate %d-length array",
                     howMany);
    exit(1);
  }

  for (count = 0; count < howMany; count++)
   fscanf(fin, "%lf", &tempA[count]);

  fclose(fin);

  *n = howMany;
  *a = tempA;
}

/* sumArray sums the values in an array of doubles.
 * Receive: a, a pointer to the head of an array;
 *          numValues, the number of values in the array.
 * Return: the sum of the values in the array.
 */

double sumArray(double * a, int numValues) {
  int i;
  double result = 0.0;

  for (i = 0; i < numValues; ++i) {
    result += a[i];
  }

  return result;
}

(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07[00m$ script      cat omp/Ar  ompArraySum.c
/* ompArraySum.c uses an array to sum the values in an input file,

 *  using OpenMP, whose name is specified on the command-line.

 *

 * [[Program is parallelized using OpenMP parallel reduction]]

 *

 * Joel Adams, Fall 2005

 * for CS 374 (HPC) at Calvin College.

 *

 * Modified by: Won Seok Park

 * Date: November 19, 2021

 * CS 374 Calvin University

 */



#include <stdio.h>      /* I/O stuff 	*/

#include <stdlib.h>     /* calloc, etc. */

#include <omp.h>     	/* OpenMP		*/



void readArray(char * fileName, double ** a, int * n);

double sumArray(double * a, int numValues) ;



int main(int argc, char * argv[])

{

	int  howMany;

	double sum;

	double * a;

	

	double 	startTime = 0.0, 

			ioTime = 0.0,

			sumTime =0.0,

			totalTime = 0.0;



	if (argc != 2) {

		fprintf(stderr, "\n*** Usage: arraySum <inputFile>\n\n");

		exit(1);

	}

	

	startTime = omp_get_wtime();



	readArray(argv[1], &a, &howMany);

	ioTime = omp_get_wtime() - startTime;

	

	sum = sumArray(a, howMany);

	printf("Read in: %d\n", howMany);

	sumTime = omp_get_wtime() - startTime - ioTime;

	

	totalTime = omp_get_wtime() - startTime;

	

	printf("The sum of the values in the input file '%s' is %g\n",

		   argv[1], sum);

	printf("Processing Time\nTotal: %f\nI/O: %f\nSum: %f\n",

			   totalTime, ioTime, sumTime);



	free(a);



	return 0;

}



/* readArray fills an array with values from a file.

 * Receive: fileName, a char*,

 *          a, the address of a pointer to an array,

 *          n, the address of an int.

 * PRE: fileName contains N, followed by N double values.

 * POST: a points to a dynamically allocated array

 *        containing the N values from fileName

 *        and n == N.

 */



void readArray(char * fileName, double ** a, int * n) {

  int count, howMany;

  double * tempA;

  FILE * fin;



  fin = fopen(fileName, "r");

  if (fin == NULL) {

    fprintf(stderr, "\n*** Unable to open input file '%s'\n\n",

                     fileName);

    exit(1);

  }



  fscanf(fin, "%d", &howMany);

  tempA = calloc(howMany, sizeof(double));

  if (tempA == NULL) {

    fprintf(stderr, "\n*** Unable to allocate %d-length array",

                     howMany);

    exit(1);

  }



  for (count = 0; count < howMany; count++)

   fscanf(fin, "%lf", &tempA[count]);



  fclose(fin);



  *n = howMany;

  *a = tempA;

}



/* sumArray sums the values in an array of doubles.

 * Receive: a, a pointer to the head of an array;

 *          numValues, the number of values in the array.

 * Return: the sum of the values in the array.

 */



double sumArray(double * a, int numValues) {

	int i;

	double result = 0.0;



	// OMP magic (so much easier than MPI or explicit thread control)

	#pragma omp parallel for reduction(+:result)

	for (i = 0; i < numValues; i++) {

		result += a[i];

	}



	return result;

}

(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07[00m$ ../../gen       /genHosts.pl > hosts
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07[00m$ cd MPI
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ make
make: 'arraySum' is up to date.
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ makecd MPI../genHosts.pl > hosts[1Pcat omp/ompArraySum.c[3PMPI/arraySum.cmake[Kcd MPIat omp/ompArraySum.c [4PMPI/arraySum.c[5Pakefile scp -r MPI wp22@borg:~/374/P
Project07/[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ ls[K

[K[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ lscd Downloads/cs374/homework0
07[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ [14Pssh wp22@borg

[K[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ ssh wp22@borg[7Pcd .././ompArraySum /home/cs/374/e
exercises/07/100k.txt[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ make[K

[K[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ makel[Kssh wp22@borgexit[Knano Makefilecode Makefile ls[Kcode Makefile mv vectorMult.cu vectorSqrt.
.cu[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ m[17Pake clean

[K[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ make cleanls[Kcd vectorSqrt/p -r vectorMult/ vectorSqrt
t[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ cd ../[K

[K[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ cd .././vectorMult 500000000[8Pcd vectorMult/./vectorAdd 500000000ls[Kcd Downloads/cs374/lab09/[15Pssh gold2003[6Pexitcd vectorMult/./vectorAdd 500000000[K00[3P 5000000000make[K[2Plscd Downloads/cs374/lab09/[4P./vectorMult 50000000make[K./vectorMult 50000000make[K./vectorMult 50000000make[K./vectorMult 50000000make[Kcode Makefile make[Kcd vectorMult/./vectorAdd 500000000cd ../[Kode vectorMult.cu ls[Kcd vectorMult/[9@p Makefile vectorMult/vectorAdd.cu vectorMult/v
vectorMult.cu[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ [11Pmkdir vectorMult

[K[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ mkdir vectorMult[6Pssh gold0210code Makefile [4Pmake clean./vectorAdd 50000000[6Pcode Makefile make[Kcode Makefile ./vectorAdd 50000000[K[K[K[8Pmakecode vectorAdd.cu [6P./vectorAdd [8Pmake[2Plscd cs374/lab09mv vectorAdd.cu Makefile ./c
cs374/lab09/[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ m[10Pkdir cs374/lab09

[K[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ mkdir cs374/lab09[4Pcd Downloads/[8Plearglxinfoa2ps WonSeokPark code WonSeokPark ls[Kcd Downloads/cs374/homework0
06/[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ exit[K

[K[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ exitssh gold00wp22@borgcp * wp22@borg:~/374/Projec
ct06[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ s[14Psh wp22@borg

[K[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ ssh wp22@borgcp * wp22@borg:~/374/projec
ct06[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ scp * wp22@borg:~/374/P

ct06[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ ls[K

[K[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ lscd Downloads/cs374/homework0
06/[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ [14Pssh wp22@borg

[K[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ ssh wp22@borgexit[Kmpirun -np 32 -machinefile .
../../hosts ./arraySum /home/cs/374/exercises/07/100m.txt[Aun -np 16

../../hosts ./arraySum /home/cs/374/exercises/07/10[1Pm.txt[Arun -np 32

../../hosts ./arraySum /home/cs/374/exercises/07/10m.txt[1@0k.txt[Aun -np 4 -machinefile ..[1P/../hosts ./arraySum /home/cs/374/exercises/07/100k.txt[Arun -np 8

./../hosts ./arraySum /home/cs/374/exercises/07/100k.txt[2Pm.txt[Aake[K

[K[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ makepirun -np 8 -machinefile ..
./../hosts ./arraySum /home/cs/374/exercises/07/1m.txt
Read in: 1000000
The sum of the values in the input file '/home/cs/374/exercises/07/1m.txt' is 4.99829e+06
Processing Time
Total: 0.318667
I/O: 0.314588
Scatter: 0.002502
Sum: 0.001577
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/MPI[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/MPI[00m$ [Kcd ../
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07[00m$ cd omp/
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/omp[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/omp[00m$ [3Pexport OMP_NUM_THREADS=8

[K[A
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/omp[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/omp[00m$ export OMP_NUM_THREADS=8                        make
gcc -Wall -ansi -pedantic -std=c99 ompArraySum.c -o ompArraySum -fopenmp
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/omp[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/omp[00m$ makeexport OMP_NUM_THREADS=8./ompArraySum /home/cs/374/e
exercises/07/1m.txt OMP_NUM_THREADS=1                  
Read in: 1000000
The sum of the values in the input file '/home/cs/374/exercises/07/1m.txt' is 4.99829e+06
Processing Time
Total: 0.139865
I/O: 0.139341
Sum: 0.000524
(base) ]0;wp22@gold00: ~/Downloads/cs374/homework07/omp[01;32mwp22@gold00[00m:[01;34m~/Downloads/cs374/homework07/omp[00m$ [Kexit

Script done on 2021-11-28 20:09:46-05:00 [COMMAND_EXIT_CODE="0"]
